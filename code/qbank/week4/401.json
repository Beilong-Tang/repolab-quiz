{
  "question_type": "code",
  "question_title": "Longest Palindromic Substring",
  "question_content": {
    "description": "### Problem01\n\nA palindrome is a word, number, phrase, or other sequence of characters which reads the same backward as forward, such as madam or racecar.\n\nFill in the following two blanks\n\n```java\npublic class LPS {\n\n\n    public static String longestPalindrome(String s) \n    {\n        int len=s.length();\n        if (len<2) return s;\n        int index=0;\n        int maxlen=1;\n        for(int i =0;i<len-1;i++)\n        {\n            for(int j =i+1;j<len;j++)\n            {\n                if (__0__ && (j-i+1)>maxlen )\n                {\n                    maxlen=j-i+1;\n                    index=i;\n                }\n            }\n        }\n        return s.substring(index,index+maxlen);\n    }\n    public static boolean ifPalindrome(String s)\n    {\n        int len=s.length();\n        for(int i =0;i<len/2;i++)\n        {\n            if(__1__){return false;}\n        }\n        return true;\n    }\n}\n```\n\nComplete static methods in LPS.java so that it takes a string s and returns the longest palindromic substring of it.\n\nExample1:\nlongestPalindrome(\"babad\")=\"bab\"\nExample2:\nlongestPalindrome(\"bccd\")=\"cc\"\nExample3:\nlongestPalindrome(\"accccat\")=\"acccca\"\n",
    "code": "public class LPS {\n\n\n    public static String longestPalindrome(String s) \n    {\n        int len=s.length();\n        if (len<2) return s;\n        int index=0;\n        int maxlen=1;\n        for(int i =0;i<len-1;i++)\n        {\n            for(int j =i+1;j<len;j++)\n            {\n                if (__0__ && (j-i+1)>maxlen )\n                {\n                    maxlen=j-i+1;\n                    index=i;\n                }\n            }\n        }\n        return s.substring(index,index+maxlen);\n    }\n    public static boolean ifPalindrome(String s)\n    {\n        int len=s.length();\n        for(int i =0;i<len/2;i++)\n        {\n            if(__1__){return false;}\n        }\n        return true;\n    }\n}",
    "check": "void check(){\n    String s = \"babad\";\n    String y = \"AGCGATT\";\n    String z = \"WAXCWWDX\";\n    System.out.println(LPS.longestPalindrome(s).equals(\"bab\")&&LPS.longestPalindrome(y).equals(\"AGCGA\") && LPS.longestPalindrome(z).equals(\"WW\")); \n}",
    "instruction": "/open quiz-gen/LPS.txt\n/open quiz-gen/check.txt\ncheck()\n/save -history quiz-gen/data.txt",
    "title": "LPS",
    "quiz_type": "code",
    "import": "",
    "main_output": null,
    "answers": [
      "ifPalindrome(s.substring(i, j+1))",
      "s.charAt(i)!=s.charAt(len-i-1)"
    ],
    "author": "Beilong Tang",
    "level": "2",
    "section": "2.3",
    "id": 401,
    "explains": "None"
  },
  "question_level": 2,
  "question_id": 401,
  "question_week": 4
}